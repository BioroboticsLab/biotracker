#pragma once

#include <iostream>
#include <vector>


namespace CONFIGPARAM
{
	// System config
	const std::string CONFIG_INI_FILE				= "./BlobtrackerConfig.ini";
}

namespace APPLICATIONPARAM
{
	// System config
	const std::string APP_VERSION					= "APPLICATIONPARAM/APP_VERSION";
}

namespace TRACKERPARAM
{
	// Parameter for the opencv BackgroundSubtractorMOG2 class 
	const std::string BG_MOG2_HISTORY				= "TRACKERPARAM/BG_MOG2_HISTORY";
	const std::string BG_MOG2_VAR_THRESHOLD			= "TRACKERPARAM/BG_MOG2_VAR_THRESHOLD";
	//const std::string BG_MOG2_SHADOW_DETECTION		= "TRACKERPARAM/BG_MOG2_SHADOW_DETECTION";
	const std::string BG_MOG2_BACKGROUND_RATIO		= "TRACKERPARAM/BG_MOG2_BACKGROUND_RATIO";
	//const std::string BG_MOG2_INIT_FRAME_NUMBER		= "TRACKERPARAM/BG_MOG2_INIT_FRAME_NUMBER";
	//const std::string BG_MOG2_ENABLED				= "TRACKERPARAM/BG_MOG2_ENABLED";	

	// Parameters for enabling methods
	//const std::string ENABLE_BG_SUBTRACTION			= "TRACKERPARAM/ENABLE_BG_SUBTRACTION";
	//const std::string ENABLE_BG_IMAGE				= "TRACKERPARAM/ENABLE_BG_IMAGE";
	//const std::string ENABLE_GAUSSIAN_BLUR			= "TRACKERPARAM/ENABLE_GAUSSIAN_BLUR";
	//const std::string ENABLE_BINARIZING				= "TRACKERPARAM/ENABLE_BINARIZING";
	//const std::string ENABLE_ERODE					= "TRACKERPARAM/ENABLE_ERODE";
	//const std::string ENABLE_DILATE					= "TRACKERPARAM/ENABLE_DILATE";
	//const std::string IMAGE_VIEW_TYPE				= "TRACKERPARAM/IMAGE_VIEW_TYPE";

	// Mapping issue
	//const std::string MAX_MAPPED_DISTANCE_PX		= "TRACKERPARAM/MAX_MAPPED_DISTANCE_PX";
	//const std::string MAX_MAPPED_DISTANCE_CM		= "TRACKERPARAM/MAX_MAPPED_DISTANCE_CM";	

	// Blob dectection issue
	const std::string MAX_BLOB_SIZE					= "TRACKERPARAM/MAX_BLOB_SIZE";
	const std::string MIN_BLOB_SIZE					= "TRACKERPARAM/MIN_BLOB_SIZE";

	// Parameters for image pre-processing step
	const std::string SIZE_ERODE					= "TRACKERPARAM/SIZE_ERODE";
	const std::string SIZE_DILATE					= "TRACKERPARAM/SIZE_DILATE";
	const std::string THRESHOLD_BINARIZING			= "TRACKERPARAM/THRESHOLD_BINARIZING";
	//const std::string GAUSSIAN_BLUR_SIZE			= "TRACKERPARAM/GAUSSIAN_BLUR_SIZE";
}

namespace PARTICLEFILTERPARAM
{
	const std::string NUMBER_OF_PARTICLES			= "PARTICLEFILTERPARAM/NUMBER_OF_PARTICLES";
	const std::string RESAMPLE_PROPORTION			= "PARTICLEFILTERPARAM/RESAMPLE_PROPORTION";
	const std::string RESAMPLE_STEPS				= "PARTICLEFILTERPARAM/RESAMPLE_STEPS";
	const std::string NOISE_OF_COORDINATES			= "PARTICLEFILTERPARAM/NOISE_OF_COORDINATES";
	const std::string NOISE_OF_ANGLE				= "PARTICLEFILTERPARAM/NOISE_OF_ANGLE";
	const std::string MAX_PARTICLE_IN_FAMILY		= "PARTICLEFILTERPARAM/MAX_PARTICLE_IN_FAMILY";
	const std::string OBSERVER_POSE_VAR				= "PARTICLEFILTERPARAM/OBSERVER_POSE_VAR";
	const std::string OBSERVER_ANGLE_VAR			= "PARTICLEFILTERPARAM/OBSERVER_ANGLE_VAR";
	const std::string OBSERVER_SCORE_MINIMUM		= "PARTICLEFILTERPARAM/OBSERVER_SCORE_MINIMUM";
    const std::string CLUSTERING_EPSILON			= "PARTICLEFILTERPARAM/CLUSTERING_EPSILON";
    const std::string MINIMUM_SCORE					= "PARTICLEFILTERPARAM/MINIMUM_SCORE";
    const std::string MAX_PARTICLES_PER_BUCKET		= "PARTICLEFILTERPARAM/MAX_PARTICLES_PER_BUCKET";
    const std::string BUCKET_SIZE					= "PARTICLEFILTERPARAM/BUCKET_SIZE";
    const std::string PARTICLE_WIGGLE_DISTANCE		= "PARTICLEFILTERPARAM/PARTICLE_WIGGLE_DISTANCE";
    const std::string NUM_CLUSTERS					= "PARTICLEFILTERPARAM/NUM_CLUSTERS";
}

namespace FISHPARAM
{
	// Fish attributes
	const std::string FISH_HISTORY_MAX_SIZE			= "FISHPARAM/FISH_HISTORY_MAX_SIZE";
	const std::string FISH_ROBO_RGB_COLOR			= "FISHPARAM/FISH_ROBO_RGB_COLOR";
	const std::string FISH_MARKED_RGB_COLOR			= "FISHPARAM/FISH_MARKED_RGB_COLOR";
	const std::string FISH_RGB_COLOR				= "FISHPARAM/FISH_RGB_COLOR";
	const std::string FISH_ID_FONT_SIZE				= "FISHPARAM/FISH_ID_FONT_SIZE";
	const std::string FISH_ID_FONT_SIZE_THICKNESS	= "FISHPARAM/FISH_ID_FONT_SIZE_THICKNESS";
	const std::string FISH_ORIENTATION_LENGTH		= "FISHPARAM/FISH_ORIENTATION_LENGTH";
	const std::string FISH_ORIENTATION_THICKNESS	= "FISHPARAM/FISH_ORIENTATION_THICKNESS";
	const std::string FISH_POSITION_RADIUS			= "FISHPARAM/FISH_POSITION_RADIUS";
	const std::string FISH_POSITION_THICKNESS		= "FISHPARAM/FISH_POSITION_THICKNESS";
	const std::string FISH_MARKED_RADIUS			= "FISHPARAM/FISH_MARKED_RADIUS";
	const std::string FISH_MARKED_RADIUS_THICKNESS	= "FISHPARAM/FISH_MARKED_RADIUS_THICKNESS";
	const std::string FISH_RGB_COLOR_ID_1			= "FISHPARAM/FISH_RGB_COLOR_ID_1";
	const std::string FISH_RGB_COLOR_ID_2			= "FISHPARAM/FISH_RGB_COLOR_ID_2";
	const std::string FISH_RGB_COLOR_ID_3			= "FISHPARAM/FISH_RGB_COLOR_ID_3";
	const std::string FISH_RGB_COLOR_ID_4			= "FISHPARAM/FISH_RGB_COLOR_ID_4";
	const std::string FISH_RGB_COLOR_ID_5			= "FISHPARAM/FISH_RGB_COLOR_ID_5";
	const std::string FISH_RGB_COLOR_ID_6			= "FISHPARAM/FISH_RGB_COLOR_ID_6";
	const std::string FISH_RGB_COLOR_ID_7			= "FISHPARAM/FISH_RGB_COLOR_ID_7";
	const std::string FISH_RGB_COLOR_ID_8			= "FISHPARAM/FISH_RGB_COLOR_ID_8";
	const std::string FISH_RGB_COLOR_ID_9			= "FISHPARAM/FISH_RGB_COLOR_ID_9";
	const std::string FISH_RGB_COLOR_ID_10			= "FISHPARAM/FISH_RGB_COLOR_ID_10";
	const std::string FISH_RGB_COLOR_ID_11			= "FISHPARAM/FISH_RGB_COLOR_ID_11";
	const std::string FISH_RGB_COLOR_ID_12			= "FISHPARAM/FISH_RGB_COLOR_ID_12";	
}

namespace GUIPARAM
{
	// FPS label
	const std::string ENABLE_LABEL_FPS				= "GUIPARAM/ENABLE_LABEL_FPS";
	// Fish id label
	const std::string ENABLE_LABEL_FISH_ID			= "GUIPARAM/ENABLE_LABEL_FISH_ID";
	// Replica marker
	const std::string ENABLE_LABEL_REPLICA			= "GUIPARAM/ENABLE_LABEL_REPLICA";
	// Fish position
	const std::string ENABLE_LABEL_FISH_POS			= "GUIPARAM/ENABLE_LABEL_FISH_POS";
	// Fish orientation
	const std::string ENABLE_LABEL_FISH_ORI			= "GUIPARAM/ENABLE_LABEL_FISH_ORI";
	// Fish history
	const std::string ENABLE_LABEL_FISH_HISTORY		= "GUIPARAM/ENABLE_LABEL_FISH_HISTORY";
	// Blobs
	const std::string ENABLE_SHOW_BLOBS				= "GUIPARAM/ENABLE_SHOW_BLOBS";
	// Swap fish id
	const std::string ENABLE_SWAP_FISH_ID			= "GUIPARAM/ENABLE_SWAP_FISH_ID";
}

namespace FISHTANKPARAM
{
	// Tank area
	const std::string FISHTANK_AREA_WIDTH			= "FISHTANKPARAM/FISHTANK_AREA_WIDTH";
	const std::string FISHTANK_AREA_HEIGHT			= "FISHTANKPARAM/FISHTANK_AREA_HEIGHT";
	const std::string FISHTANK_FISH_AMOUNT			= "FISHTANKPARAM/FISHTANK_FISH_AMOUNT";
	const std::string FISHTANK_AREA_CORNER1			= "FISHTANKPARAM/FISHTANK_AREA_CORNER1";
	const std::string FISHTANK_AREA_CORNER2			= "FISHTANKPARAM/FISHTANK_AREA_CORNER2";
	const std::string FISHTANK_AREA_CORNER3			= "FISHTANKPARAM/FISHTANK_AREA_CORNER3";
	const std::string FISHTANK_AREA_CORNER4			= "FISHTANKPARAM/FISHTANK_AREA_CORNER4";
	const std::string FISHTANK_ENABLE_NETWORKING	= "FISHTANKPARAM/FISHTANK_ENABLE_NETWORKING";
	const std::string FISHTANK_NETWORKING_PORT		= "FISHTANKPARAM/FISHTANK_NETWORKING_PORT";
}

